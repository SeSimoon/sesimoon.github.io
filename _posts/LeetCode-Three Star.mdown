***

## 20. Valid Parentheses

> 将每个左封闭字符所对应的字符依次压入stack中。  
> 当遇到右封闭字符时判断此时是否和栈顶元素相同。  
> 要考虑到一开始就是右封闭字符的情况(最后一个else if)，此时stack是空栈。
> 还要考虑到s为空的情况，此时应返回true，即最后一行return语句。

```java
public class Solution {
    public boolean isValid(String s) {
       
       Stack<Character> stack = new Stack<>();
       
       for (char c : s.toCharArray()) {
            if (c == '[')       stack.push(']');
            else if (c == '(')  stack.push(')');
            else if (c == '{')  stack.push('}');
            else if (stack.isEmpty() || stack.pop()!=c)  
                return false;
       }
        return stack.isEmpty();
    }
}
```

***

## 459. Repeated Substring Pattern

Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. 

Example 1:

```
Input: "abab"
Output: True
Explanation: It's the substring "ab" twice.
```

Example 2:

```
Input: "aba"
Output: False
```

> 首先令子串长度为字符串长度的一半进行检查，若不能拼接则不断减小子串长度来继续判断 

```java
public class Solution {
    public boolean repeatedSubstringPattern(String s) {
        int len = s.length();
        for (int i=len/2; i>0; i--) {
            if (len % i == 0) {
                int m = len / i;
                String sub = s.substring(0, i);
                int j = 0;
                for (j=1; j<m; j++) {
                    if (!sub.equals(s.substring(i*j, i*j+i)))  break;
                }
                if (j == m) return true;
            }
        }
        return false;
    }
}
```

***

## 234. Palindrome Linked List

Given a singly linked list, determine if it is a palindrome.

思路：  
1.设置快慢两个指针指向头结点。  
2.快指针每次移动两个节点，慢指针每次移动一个节点。  
3.将以慢指针所指向的节点为头结点的链表反转。  
4.比较链表的每个节点是否相同。  
{: .notice} 

> 判断节点奇偶：节点为奇数个时，fast最后指向null，若为偶数，最后指向的不是null。  
> while条件为：fast != null && fast.next != null 因为fast最后指向的是null(奇)或者下一个是null(偶)
> 最后折半比较时，以slow为head的链表更短，所以slow != null而不是fast != null

```java
public boolean isPalindrome(ListNode head) {
    ListNode fast = head, slow = head;
    while (fast != null && fast.next != null) {
        fast = fast.next.next;
        slow = slow.next;
    }
    if (fast != null) { //奇数个节点时慢指针后移一个节点，为了使右边部分更小
        slow = slow.next;
    }
    slow = reverse(slow);
    fast = head;
    
    while (slow != null) {
        if (fast.val != slow.val) {
            return false;
        }
        fast = fast.next;
        slow = slow.next;
    }
    return true;
}

public ListNode reverse(ListNode head) {
    ListNode prev = null; 
    while (head != null) {
        ListNode next = head.next;
        head.next = prev;
        prev = head;
        head = next;
    }
    return prev;
}
```