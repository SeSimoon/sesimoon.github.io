
## 557. Reverse Words in a String III

> 注意：StringBuffer.reverse()而不是String.reverse()

```java
public class Solution {
    public String reverseWords(String s) {
        String[] strs = s.split(" ");
        StringBuilder builder = new StringBuilder();
        for (int i=0; i<strs.length; i++) {
            builder.append(strs[i].reverse());
            if (i != strs.length-1)
                builder.append(" ");
        }
        return builder.toString();
    }
}
```

***

## 520. Detect Capital

Given a word, you need to judge whether the usage of capitals in it is right or not.

We define the usage of capitals in a word to be right when one of the following cases holds:

All letters in this word are capitals, like "USA".
All letters in this word are not capitals, like "leetcode".
Only the first letter in this word is capital if it has more than one letter, like "Google".


```java
public boolean detectCapitalUse(String word) {
    return word.equals(word.toUpperCase()) || 
           word.equals(word.toLowerCase()) ||
           Character.isUpperCase(word.charAt(0)) && 
           word.substring(1).equals(word.substring(1).toLowerCase()); //第一个大写其余小写substring(int beginIndex)
}
```

```java
public boolean detectCapitalUse(String word) {
    int numUpper = 0;
    for (int i=0; i<word.length(); i++) {
        if (Character.isUpperCase(word.charAt(i))) 
            numUpper++;
    }
    if (numUpper == 1) return Character.isUpperCase(word.charAt(0));
    return numUpper == 0 || numUpper == word.length();
}
```

***


### 125. Valid Palindrome

Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

For example,
"A man, a plan, a canal: Panama" is a palindrome.
"race a car" is not a palindrome.

> 两个指针分别指向首和末字符  
> 首末指针向中间扫描，直到停在字母处  
> 判断两个字符是否相等，不等则返回false
> 相等则继续扫描

> Character.isLetterOrDigit没有记住
> Character.toLowerCase没有考虑到
> 第二种方法没有想到 

```java
//while形式
public class Solution {
    public boolean isPalindrome(String s) {
        if(s.isEmpty())  return true;
        char[] chars = s.toCharArray();
        int start = 0;
        int end = s.length() - 1;
        
        while(start<end) {
            while(start<end && !Character.isLetterOrDigit(chars[start])) {
                start ++;
            }
            while(start<end && !Character.isLetterOrDigit(chars[end])) {
                end --;
            }
            
            if(Character.toLowerCase(chars[start]) != Character.toLowerCase(chars[end])) {
                return false;
            } else {
                start ++;
                end --;
            }
        }
        return true;
    }   
}
```

```java
//if形式
public class Solution {
    public boolean isPalindrome(String s) {
        if (s.isEmpty())  return true;
        int start = 0, end = s.length()-1;
        char[] chars = s.toCharArray();
        
        while (start < end) {
                if (!Character.isLetterOrDigit(chars[start]))  start ++;
                else if (!Character.isLetterOrDigit(chars[end]))  end --;
                else {
                    if (Character.toLowerCase(chars[start]) != Character.toLowerCase(chars[end]))
                        return false;        
                        start ++;
                        end --;
                } 
        }
        return true;
    }
}
```


***

## 434. Number of Segments in a String

Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.

Please note that the string does not contain any non-printable characters.

Example:

```
Input: "Hello, my name is John"
Output: 5
```

> 没有考虑到很多空格连起来的情况

```java
//my solution
public class Solution {
    public int countSegments(String s) {
        int count = 0;
        String[] strs = s.split(" ");
        for (int i=0; i<strs.length; i++) {
            if (strs[i].length() != 0) 
            	count ++;
        }
        return count;
    }
}
```

```java
public int countSegments(String s) {
    int res=0;
    for(int i=0; i<s.length(); i++)
        if(s.charAt(i)!=' ' && (i==0 || s.charAt(i-1)==' ')) //该char不是‘ ’，前一个char是‘ ’
            res ++;        
    return res;
}
```

***

## 141. Linked List Cycle

Given a linked list, determine if it has a cycle in it.


```java
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null) return false; //无head.next==null return false 节点可以指向自己
        ListNode fast = head;
        ListNode slow = head;
        
        while (fast.next != null && fast.next.next != null) { //注意条件和fast相关
            slow = slow.next;
            fast = fast.next.next;
            if(fast == slow)    
                return true;
        }
        return false;
    }
}
```

***

## 83. Remove Duplicates from Sorted List

Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,
Given 1->1->2, return 1->2.
Given 1->1->2->3->3, return 1->2->3.

> 无法确认while条件

```java
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode node = head;
        while (node!=null && node.next!=null) {
            if (node.val == node.next.val) {
                node.next = node.next.next;
            } else {
                node = node.next; //必须放在else里而不是没有else，排除全是同样的元素的情况
            }
        }
        return head;
    }
}
```

思路：  
求出此时结点后面的无重复序列。  
判断该结点是否与子序列的首结点相同，若相同则删掉子序列首结点。  
{: .notice} 

```java
public ListNode deleteDuplicates(ListNode head) {
    if(head == null || head.next == null)   
    	return head;
    head.next = deleteDuplicates(head.next);
    return head.val == head.next.val ? head.next : head;
}
```

***

### 111. Minimum Depth of Binary Tree

最小深度

```java
public class Solution {
    public int minDepth(TreeNode root) {
        if (root == null)  return 0;
        int left = minDepth(root.left);
        int right = minDepth(root.right);
        return (left==0 || right==0) ? right+left+1 : Math.min(left, right)+1;
    }
}
```

### 104. Maximum Depth of Binary Tree

最大深度

```java
public class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null)  return 0;
        return Math.max(maxDepth(root.left), maxDepth(root.right))+1;
    }
}
```

